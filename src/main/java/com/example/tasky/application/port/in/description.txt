Definition of ports/in (Input Ports)
The ports/in package defines the interfaces that expose application functionality to the outside world.
These interfaces represent use cases that clients (such as REST controllers or event handlers) can invoke without directly interacting with the domain model.

The key purpose of input ports is to:
✅ Decouple business logic from the delivery mechanism (REST, messaging, CLI, etc.).
✅ Ensure that external components only depend on abstractions, not concrete implementations.
✅ Allow multiple adapters (e.g., REST, GraphQL, Kafka, etc.) to interact with the same core logic.


Possible Interfaces in ports/in
1️⃣ TaskManagementPort
📌 Purpose: Defines the core operations that can be performed on tasks (CRUD-like operations).
🔹 Used by: REST controllers, event listeners, CLI commands, etc.
🔹 Methods could include:
        createTask(title, description, dueDate) → Creates a new task.
        updateTask(id, title, description, status) → Updates task details.
        getTaskById(id) → Fetches a specific task.
        deleteTask(id) → Deletes a task.


2️⃣ TaskAssignmentPort
📌 Purpose: Handles task assignments to users.
🔹 Used by: REST controllers, event listeners, etc.
🔹 Methods could include:

    assignTaskToUser(taskId, userId) → Assigns a task to a specific user.
    unassignTask(taskId) → Removes the user from a task.


---> These interfaces act as entry points into the application layer, ensuring that the business logic remains independent of external frameworks like Spring.